plugins {
	id 'java'
	id 'checkstyle'
	id "org.sonarqube" version "3.3"
	id "com.github.johnrengelman.shadow" version "7.1.2"
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
}

group = 'com.authLogin'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
}

project.ext {
	mainClass = 'com.authLogin.AuthLogin.AuthLoginApplication'
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven {
		url 'https://mvnrepository.com/artifact/com.sun.mail'
	}
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-config:6.1.3'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'com.google.guava:guava:11.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-mail:3.1.3'
	implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity6'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}


shadowJar {
	mergeServiceFiles()
	exclude 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.SF'
	manifest {
		attributes 'Main-Class': mainClass
	}
}

tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events("passed", "failed", "skipped")
	}
}

tasks.withType(Checkstyle) {
	configFile file('./codequality/checkstyle.xml')
	checkstyleMain.source = "src/main/java"
	checkstyleTest.enabled = false
	//checkstyleComponentTest.enabled = false
}

build.finalizedBy shadowJar

sonarqube {
	properties {
		property "sonar.exclusions", "**/AuthLoginApplication.java"
	}
}

abstract class ServiceJarSizeTask extends DefaultTask {
	@TaskAction
	def serviceJarSize() {
		def jarPath = project.buildDir.absolutePath + "/libs/${project.rootProject.name}-${project.version}-all.jar"
		def jarFile = project.file(jarPath)
		def jarSizeInMbs = (jarFile.length() / (1024 * 1024)).round(2)
		def maxJarSizeInMbs = 50
		if (jarSizeInMbs > maxJarSizeInMbs) {
			throw new GradleException("Service executable JAR size is $jarSizeInMbs Mb. The max allowed JAR size is $maxJarSizeInMbs Mb")
		} else {
			println "Service executable JAR size is $jarSizeInMbs Mb. It is below the current max jar size limit $maxJarSizeInMbs Mb"
		}
	}
}

tasks.register('serviceJarSize', ServiceJarSizeTask)
shadowJar.finalizedBy serviceJarSize

